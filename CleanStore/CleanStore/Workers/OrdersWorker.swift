//
//  OrdersWorker.swift
//  CleanStore
//
//  Created by Bradley.yoon on 2023/06/08.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class OrdersWorker
{
    var ordersStore: OrdersStoreProtocol
    
    init(ordersStore: OrdersStoreProtocol) {
        self.ordersStore = ordersStore
    }
    
    func fetchOrders(completionHandler: @escaping ([Order]) -> Void) {
        
        ordersStore.fetchOrders {(orders: () throws -> [Order]) -> Void in
            do {
                let orders = try orders()
                DispatchQueue.main.async {
                    completionHandler(orders)
                }
            }
            catch {
                DispatchQueue.main.async {
                    completionHandler([])
                }
            }
        }
    }
    
    func createOrder(orderToCreate: Order, completionHandler: @escaping (Order?) -> Void) {
        ordersStore.createOrder(orderToCreate: orderToCreate) { (order: () throws -> Order?) -> Void in
            do {
                let order = try order()
                DispatchQueue.main.async {
                     
                    completionHandler(order)
                }
            }catch {
                DispatchQueue.main.async {
                    completionHandler(nil)
                }
            }
        }
    
    }
    
    func updateOrder(orderToUpdate: Order, completionHandler: @escaping (Order?) -> Void) {
        ordersStore.updateOrder(orderToUpdate: orderToUpdate) { (order: () throws -> Order?) -> Void in
            do {
                let order = try order()
                DispatchQueue.main.async {
                    completionHandler(order)
                }
            }catch {
                DispatchQueue.main.async {
                    completionHandler(nil)
                }
            }
        }
    }
    
}


protocol OrdersStoreProtocol {
    
    func fetchOrders(completionHandler: @escaping (() throws -> [Order]) -> Void)
    func createOrder(orderToCreate: Order, completionHandler: @escaping (() throws -> Order?) -> Void)
    func updateOrder(orderToUpdate: Order, completionHandler: @escaping (() throws -> Order?) -> Void)
    func testOrder(orderToTest: Order, completionHandler: @escaping (() -> Order) -> Void)
    
}


protocol OrdersStoreUtilityProtocol {
    
}

extension OrdersStoreUtilityProtocol {
    
    func generateOrderID(order: inout Order) {
        guard order.id == nil else { return }
        order.id = "\(arc4random())"
    }
    
    func calculateOrderTotal(order: inout Order) {
        guard order.total == NSDecimalNumber.notANumber else { return }
        order.total = NSDecimalNumber.one
    }
}


enum OrderStoreError: Equatable, Error {
    case CannotFetch(String)
    case CannotCreate(String)
    case CannotUpdate(String)
    case CannotDelete(String)
}

func ==(lhs: OrderStoreError, rhs: OrderStoreError) -> Bool {
    switch (lhs, rhs) {
    case (.CannotFetch(let a), .CannotFetch(let b)) where a == b: return true
    case (.CannotCreate(let a), .CannotCreate(let b)) where a == b: return true
    case (.CannotUpdate(let a), .CannotUpdate(let b)) where a == b: return true
    case (.CannotDelete(let a), .CannotDelete(let b)) where a == b: return true
    default: return false
    }
}
